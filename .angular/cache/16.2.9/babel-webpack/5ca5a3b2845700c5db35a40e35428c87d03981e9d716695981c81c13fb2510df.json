{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/FullVoid/source/repos/MediaScrapperClient/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AppSettingsService } from './app-settings.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n    }\n    setHeaders() {\n      const headersConfig = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Cache-Control': 'no-store, no-cache'\n      };\n      return new HttpHeaders(headersConfig);\n    }\n    formatErrors(response) {\n      const applicationError = response.headers.get('Application-Error');\n      if (applicationError) {\n        return throwError(applicationError);\n      }\n      switch (response.status) {\n        case 0:\n          return new Error(\"Backend offline: \" + JSON.stringify(response));\n        case 400:\n          return new Error(\"BadRequest: \" + JSON.stringify(response));\n        case 401:\n          return new Error(\"Unathorized: \" + JSON.stringify(response));\n        case 403:\n          return new Error(\"Forbiden: \" + JSON.stringify(response));\n        case 404:\n          return new Error(\"NotFound: \" + JSON.stringify(response));\n        case 500:\n          return new Error(\"InternalServerError: \" + JSON.stringify(response));\n        default:\n          return new Error(\"UnknownError: \" + JSON.stringify(response));\n      }\n    }\n    get(path, params = new HttpParams()) {\n      var _this = this;\n      return this.http.get(`${AppSettingsService.settings.apiUrl}${path}`, {\n        headers: this.setHeaders(),\n        params: params\n      }).pipe(catchError( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (error) {\n          return _this.formatErrors(error);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    }\n    getBlob(path, params = new HttpParams()) {\n      return this.http.get(`${AppSettingsService.settings.apiUrl}${path}`, {\n        observe: 'response',\n        responseType: \"blob\",\n        params: params\n      });\n    }\n    put(path, body = {}) {\n      var _this2 = this;\n      return this.http.put(`${AppSettingsService.settings.apiUrl}${path}`, JSON.stringify(body), {\n        headers: this.setHeaders()\n      }).pipe(map(res => res), catchError( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (error) {\n          return _this2.formatErrors(error);\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    }\n    post(path, body = {}) {\n      var _this3 = this;\n      return this.http.post(`${AppSettingsService.settings.apiUrl}${path}`, JSON.stringify(body), {\n        headers: this.setHeaders()\n      }).pipe(map(res => res), catchError( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (error) {\n          return _this3.formatErrors(error);\n        });\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n    }\n    delete(path) {\n      var _this4 = this;\n      return this.http.delete(`${AppSettingsService.settings.apiUrl}${path}`, {\n        headers: this.setHeaders()\n      }).pipe(map(res => res), catchError( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (error) {\n          return _this4.formatErrors(error);\n        });\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }()));\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}